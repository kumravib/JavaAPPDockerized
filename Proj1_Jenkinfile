pipeline {
    agent any

    tools {
        maven 'maven'
        // Ensure 'sonar' tool is installed globally in Jenkins
        // This should match the name configured in Global Tool Configuration
        // and should point to the location of the SonarQube Scanner installation
        // Example: 'sonar' is the tool name configured in Jenkins
    }

    environment {
        SONAR_HOST_URL = 'http://35.175.173.180:9000/' // Update with your SonarQube server URL
        SONAR_LOGIN = credentials('sonar-token') // Credentials ID for SonarQube access token
        ECR_REGISTRY = "711387110373.dkr.ecr.us-east-2.amazonaws.com/ravi"
        // Set the name of your Docker image
        dockerImageTag = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Git Checkout') {
            steps {
                // Correct syntax for Git checkout
                checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/kumravib/JavaAPPDockerized.git']])
            }
        }

        stage('Build') {
            steps {
                // Run Maven clean package
                sh 'mvn clean package'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                // Execute SonarQube scanner
                withSonarQubeEnv('sonar') {
                    sh "mvn sonar:sonar \
                        -Dsonar.host.url=${SONAR_HOST_URL} \
                        -Dsonar.login=${SONAR_LOGIN}"
                }
            }
        }

        stage('Building image') {
            steps {
                script {
                    dockerImage = docker.build("${ECR_REGISTRY}:${dockerImageTag}")
                }
            }
        }

        stage('Pushing to ECR') {
            steps {
                script {
                    // Log in to ECR
                    sh 'aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 711387110373.dkr.ecr.us-east-1.amazonaws.com/ravi'
                    // Push Docker image to ECR
                    sh "docker push ${ECR_REGISTRY}:${dockerImageTag}"
                }
            }
        }

        stage('Update deployment.yaml') {
            environment {
                GIT_REPO_NAME = "kumravib/JavaAPPDockerized.git"
                GIT_USER_NAME = "kumravib"
                // Ensure these are set in the pipeline or passed as parameters
                ECR_REGISTRY = '711387110373.dkr.ecr.us-east-1.amazonaws.com/ravi'
                dockerImageTag = 'latest'  // or any tag you'd like to use
             }
            steps {
                     sh '''
                        # Clone the public repository using HTTPS (no credentials required for public repos)
                        git clone https://github.com/kumravib/JavaAPPDockerized.git
          
                        # Change into the repository directory
                        cd JavaAPPDockerized
          
                        # Verify the current directory and list files
                        pwd
                        ls
          
                        # Pull the latest changes from the remote repository to make sure we are up-to-date
                        git pull origin master
          
                        # Modify deploy.yaml using sed to update the Docker image
                        sed -i "s|${ECR_REGISTRY}:.*|${ECR_REGISTRY}:${dockerImageTag}|" deploy.yaml
                        
                        # Verify the current directory again
                        pwd
                        
                        # Set Git user name and email (optional if needed for commit)
                        git config user.email "kumravib@live.com"
                        git config user.name "kumravib"
                        
                        # Check git status to see what changes are made
                        git status
                        
                        # Add the modified deploy.yaml file to git staging
                        git add deploy.yaml
                        
                        # Commit the change
                        git commit -m "Update image in deploy.yaml"
                        
                        # Push the changes back to the master branch (or a feature branch if needed)
                        git push https://kumravib:ghp_CpX9u3Ik78dPf@github.com/kumravib/JavaAPPDockerized.git HEAD:master
                        # git push https://kumravib:ghp_CpX9u3Ik78dPf@github.com/kumravib/JavaAPPDockerized.git HEAD:master
                '''
                 }
            }

        stage('Deploy updated manifest to k8 Cluster') {
            steps {
                script {
                  kubeconfig(credentialsId: 'kube_config', serverUrl: 'https://172.31.26.182:6443') {
                    sh '''
                      kubectl apply -f deploy.yaml
                      kubectl apply -f service.yaml
                    '''
                }

                }

            }

        }

    }

    post {
        always {
            // Clean up workspace after the build
            cleanWs()
        }
    }
}
